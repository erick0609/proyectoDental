package formularios;


import clases.bdConexion;
import clases.decimal;
import clases.pais;
import clases.paciente;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author laptop-1
 */
public class frmPaciente extends javax.swing.JInternalFrame {

    bdConexion con;
    paciente p = new paciente();
    Object[][] dtPaciente; //variable de tipo Object que almacena una matriz de datos
    int fila=-1;
    
    {
        initComponents();        
        comboPais();
        comboTipoDato();
        activaOpciones(true, false, false, false, false);
        activaControles(false,false);
        comboEmail();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        frmNuevoCorreo = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        txtNCorreo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        lblNuevoPaciente = new javax.swing.JLabel();
        lblModificarPaciente = new javax.swing.JLabel();
        lblBorrarPaciente = new javax.swing.JLabel();
        lblGuardarPaciente = new javax.swing.JLabel();
        lblCancelarCambios = new javax.swing.JLabel();
        jXTaskPane2 = new org.jdesktop.swingx.JXTaskPane();
        jLabel12 = new javax.swing.JLabel();
        jcBuscar = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtValorBuscar = new javax.swing.JTextField();
        panelContenedor = new javax.swing.JPanel();
        panelPacientes = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNumDni = new javax.swing.JTextField();
        jcTipoDoc = new javax.swing.JComboBox();
        txtCodigoPaciente = new javax.swing.JTextField();
        txtNombres = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtApellidos2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcPais = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jcCiudad = new javax.swing.JComboBox();
        jcProvincia = new javax.swing.JComboBox();
        jcDistrito = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jdFechNac = new com.toedter.calendar.JDateChooser();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtModo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jcEmail = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPacientes = new javax.swing.JTable();

        jDialog1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 153, 255));

        jLabel18.setText("Nuevo Email: @");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel18)
                .addContainerGap(256, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addGap(168, 168, 168))
        );

        jDialog1.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 13, 390, 260));

        frmNuevoCorreo.setTitle("Pacientes");
        frmNuevoCorreo.setBounds(new java.awt.Rectangle(0, 0, 550, 300));
        frmNuevoCorreo.setModal(true);

        jPanel3.setBackground(java.awt.SystemColor.activeCaption);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por:"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("Nuevo Correo: @");
        jPanel3.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 120, 30));

        txtNCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNCorreoKeyReleased(evt);
            }
        });
        jPanel3.add(txtNCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 230, 30));

        jButton1.setText("GUARDAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));

        javax.swing.GroupLayout frmNuevoCorreoLayout = new javax.swing.GroupLayout(frmNuevoCorreo.getContentPane());
        frmNuevoCorreo.getContentPane().setLayout(frmNuevoCorreoLayout);
        frmNuevoCorreoLayout.setHorizontalGroup(
            frmNuevoCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmNuevoCorreoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
        frmNuevoCorreoLayout.setVerticalGroup(
            frmNuevoCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmNuevoCorreoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setBackground(java.awt.SystemColor.activeCaption);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("PACIENTES");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jXTaskPaneContainer1.setBackground(java.awt.SystemColor.control);
        jXTaskPaneContainer1.setInheritAlpha(false);

        jXTaskPane1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Pacientes.png"))); // NOI18N
        jXTaskPane1.setTitle("PACIENTES");

        lblNuevoPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNuevoPaciente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNuevoPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_AddDataBase.png"))); // NOI18N
        lblNuevoPaciente.setText("Nuevo Paciente");
        lblNuevoPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblNuevoPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNuevoPacienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNuevoPacienteMouseEntered(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblNuevoPaciente);

        lblModificarPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblModificarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblModificarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_edit.png"))); // NOI18N
        lblModificarPaciente.setText("Modificar Paciente");
        lblModificarPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblModificarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModificarPacienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModificarPacienteMouseEntered(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblModificarPaciente);

        lblBorrarPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblBorrarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBorrarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_delete.png"))); // NOI18N
        lblBorrarPaciente.setText("Borrar Paciente");
        lblBorrarPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblBorrarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBorrarPacienteMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblBorrarPaciente);

        lblGuardarPaciente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblGuardarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblGuardarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_save.png"))); // NOI18N
        lblGuardarPaciente.setText("Guardar Cambios");
        lblGuardarPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblGuardarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGuardarPacienteMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblGuardarPaciente);

        lblCancelarCambios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCancelarCambios.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCancelarCambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/16_database_refresh.png"))); // NOI18N
        lblCancelarCambios.setText("Cancelar Cambios");
        lblCancelarCambios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblCancelarCambios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCancelarCambiosMouseClicked(evt);
            }
        });
        jXTaskPane1.getContentPane().add(lblCancelarCambios);

        jXTaskPaneContainer1.add(jXTaskPane1);

        jXTaskPane2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/24_Search.png"))); // NOI18N
        jXTaskPane2.setTitle("Filtrar Datos:");
        jXTaskPane2.setPreferredSize(new java.awt.Dimension(137, 150));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Buscar por:");
        jXTaskPane2.getContentPane().add(jLabel12);

        jcBuscar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N° Doc. Indetidad", "Nombres", "Apellidos", "Telefono", "Email", "Pais", "Departamento", "Provincia", "Distrito" }));
        jXTaskPane2.getContentPane().add(jcBuscar);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Valor a buscar:");
        jXTaskPane2.getContentPane().add(jLabel11);

        txtValorBuscar.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtValorBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorBuscarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorBuscarKeyTyped(evt);
            }
        });
        jXTaskPane2.getContentPane().add(txtValorBuscar);

        jXTaskPaneContainer1.add(jXTaskPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelPacientes.setBackground(java.awt.SystemColor.activeCaption);
        panelPacientes.setForeground(new java.awt.Color(255, 255, 255));
        panelPacientes.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Datos Pacientes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11))); // NOI18N
        panelPacientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        panelPacientes.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Codigo:");
        panelPacientes.add(jLabel1);
        jLabel1.setBounds(16, 30, 63, 17);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nº Doc. Indentidad:");
        panelPacientes.add(jLabel2);
        jLabel2.setBounds(265, 30, 140, 17);
        jLabel2.getAccessibleContext().setAccessibleName("Nº Doc. Indentidad");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Nombres:");
        panelPacientes.add(jLabel3);
        jLabel3.setBounds(16, 55, 63, 17);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Dirección:");
        panelPacientes.add(jLabel5);
        jLabel5.setBounds(16, 85, 63, 17);

        txtNumDni.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNumDni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumDniFocusLost(evt);
            }
        });
        txtNumDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumDniActionPerformed(evt);
            }
        });
        txtNumDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumDniKeyTyped(evt);
            }
        });
        panelPacientes.add(txtNumDni);
        txtNumDni.setBounds(410, 28, 180, 25);

        jcTipoDoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        panelPacientes.add(jcTipoDoc);
        jcTipoDoc.setBounds(670, 20, 160, 30);

        txtCodigoPaciente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtCodigoPaciente.setForeground(new java.awt.Color(255, 0, 51));
        panelPacientes.add(txtCodigoPaciente);
        txtCodigoPaciente.setBounds(80, 28, 135, 25);

        txtNombres.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombresKeyTyped(evt);
            }
        });
        panelPacientes.add(txtNombres);
        txtNombres.setBounds(80, 54, 240, 25);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("A. Paterno:");
        panelPacientes.add(jLabel15);
        jLabel15.setBounds(325, 55, 80, 17);

        txtApellidos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApellidosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidosKeyTyped(evt);
            }
        });
        panelPacientes.add(txtApellidos);
        txtApellidos.setBounds(410, 54, 130, 25);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("A. Materno:");
        panelPacientes.add(jLabel16);
        jLabel16.setBounds(555, 55, 80, 17);

        txtApellidos2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtApellidos2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtApellidos2KeyReleased(evt);
            }
        });
        panelPacientes.add(txtApellidos2);
        txtApellidos2.setBounds(640, 54, 170, 25);

        txtDireccion.setColumns(1);
        txtDireccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDireccion.setLineWrap(true);
        txtDireccion.setRows(3);
        txtDireccion.setWrapStyleWord(true);
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDireccionKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtDireccion);

        panelPacientes.add(jScrollPane1);
        jScrollPane1.setBounds(80, 80, 610, 60);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("F. Nac.:");
        panelPacientes.add(jLabel6);
        jLabel6.setBounds(13, 200, 70, 25);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Telefono:");
        panelPacientes.add(jLabel7);
        jLabel7.setBounds(210, 200, 60, 25);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Email:");
        panelPacientes.add(jLabel8);
        jLabel8.setBounds(460, 200, 38, 25);

        jcPais.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcPais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcPaisActionPerformed(evt);
            }
        });
        panelPacientes.add(jcPais);
        jcPais.setBounds(80, 141, 140, 25);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("País:");
        panelPacientes.add(jLabel9);
        jLabel9.setBounds(16, 145, 63, 17);

        jcCiudad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcCiudad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcCiudadMouseClicked(evt);
            }
        });
        jcCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcCiudadActionPerformed(evt);
            }
        });
        panelPacientes.add(jcCiudad);
        jcCiudad.setBounds(290, 141, 140, 25);

        jcProvincia.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcProvincia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcProvinciaMouseClicked(evt);
            }
        });
        jcProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcProvinciaActionPerformed(evt);
            }
        });
        panelPacientes.add(jcProvincia);
        jcProvincia.setBounds(80, 170, 180, 25);

        jcDistrito.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        panelPacientes.add(jcDistrito);
        jcDistrito.setBounds(340, 170, 180, 25);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Distrio:");
        panelPacientes.add(jLabel10);
        jLabel10.setBounds(270, 170, 70, 20);
        panelPacientes.add(jdFechNac);
        jdFechNac.setBounds(80, 200, 130, 30);

        txtTelefono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });
        panelPacientes.add(txtTelefono);
        txtTelefono.setBounds(280, 200, 180, 25);

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailKeyReleased(evt);
            }
        });
        panelPacientes.add(txtEmail);
        txtEmail.setBounds(510, 200, 180, 25);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Dpto.:");
        panelPacientes.add(jLabel13);
        jLabel13.setBounds(235, 145, 50, 17);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Prov.:");
        panelPacientes.add(jLabel14);
        jLabel14.setBounds(10, 170, 70, 20);
        panelPacientes.add(txtModo);
        txtModo.setBounds(510, 240, 30, 10);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Tipo Doc:");
        panelPacientes.add(jLabel4);
        jLabel4.setBounds(595, 30, 70, 17);

        jcEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jcEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcEmailActionPerformed(evt);
            }
        });
        panelPacientes.add(jcEmail);
        jcEmail.setBounds(710, 200, 150, 25);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("@");
        panelPacientes.add(jLabel17);
        jLabel17.setBounds(690, 200, 20, 20);

        tablaPacientes.setBackground(new java.awt.Color(255, 255, 204));
        tablaPacientes.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        tablaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaPacientes.setRowHeight(25);
        tablaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPacientes);

        javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor);
        panelContenedor.setLayout(panelContenedorLayout);
        panelContenedorLayout.setHorizontalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelContenedorLayout.setVerticalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPacientesMouseClicked
       fila= tablaPacientes.rowAtPoint(evt.getPoint());//obtiene el indice de la fila seleccionada
       Date fecha = new Date();
        if (fila>-1){

            /*colocamos en los campos del formulario, el valor correspondiente obtenido
             * de la posicion de la fila y de la posicion de la columna. 
            */
//            "IdPaciente", "Tipo Documento", "N° DOC", "Nombres", "A. Paterno",
//          "A. Materno","F. Nacimiento","Teléfono", "email", "Dirección", "Pais",
//          "Deapartamento", "Provincia","Distrito"
            txtCodigoPaciente.setText(String.valueOf(tablaPacientes.getValueAt(fila, 0)));
//            rbDni.setSelected(true);
            jcTipoDoc.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 1))); 
            txtNumDni.setText(String.valueOf(tablaPacientes.getValueAt(fila, 2)));
            txtNombres.setText(String.valueOf(tablaPacientes.getValueAt(fila, 3)));
            txtApellidos.setText(String.valueOf(tablaPacientes.getValueAt(fila, 4)));
            txtApellidos2.setText(String.valueOf(tablaPacientes.getValueAt(fila, 5)));
            
            String sDate1;
            sDate1 = String.valueOf(tablaPacientes.getValueAt(fila, 6));
            Date date1;
           try {
                date1 = new SimpleDateFormat("yyyy-MM-dd").parse(sDate1);
                System.out.println(""+sDate1);
                jdFechNac.setDate(date1);
           } catch (ParseException ex) {
               Logger.getLogger(frmPaciente.class.getName()).log(Level.SEVERE, null, ex);
           }
            txtTelefono.setText(String.valueOf(tablaPacientes.getValueAt(fila, 7)));
            String [] email = separarEmail(String.valueOf(tablaPacientes.getValueAt(fila, 8)));
            txtEmail.setText(email[0]);
            jcEmail.setSelectedItem(email[1]);
            
            txtDireccion.setText(String.valueOf(tablaPacientes.getValueAt(fila, 9)));
            jcPais.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 10)));
            jcCiudad.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 11)));
            jcProvincia.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 12)));
            jcDistrito.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 13)));
            
            jcDistrito.setSelectedItem(String.valueOf(tablaPacientes.getValueAt(fila, 13))); 
            
            activaOpciones(true,true,true,false,false);//procedimiento
            activaControles (false,false);//procedimiento
        }
        
    }//GEN-LAST:event_tablaPacientesMouseClicked
    
    public String[] separarEmail(String email) {
        String[] split = email.split("@");
        return split;
    }
    
    private void lblCancelarCambiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancelarCambiosMouseClicked
        // TODO add your handling code here:
        if (lblCancelarCambios.isEnabled()) {
            updateTabla();//procedimiento
            activaOpciones (true, false, false, false,false);//procedimiento
            activaControles (false, false);//procedimiento
            limpiarObjetos();//procedimiento
        }
    }//GEN-LAST:event_lblCancelarCambiosMouseClicked

    private void lblModificarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModificarPacienteMouseClicked
        if (lblModificarPaciente.isEnabled()) {
            activaOpciones(false,false,false,true,true);//procedimiento
            activaControles(false,true);//procedimiento  
        }
    }//GEN-LAST:event_lblModificarPacienteMouseClicked

    private void lblBorrarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBorrarPacienteMouseClicked
        if (lblBorrarPaciente.isEnabled()) {
            p.eliminarPaciente(this.tablaPacientes.getValueAt(this.tablaPacientes.getSelectedRow(),0).toString());
            updateTabla();//procedimiento
            limpiarObjetos();//procedimiento
        }
    }//GEN-LAST:event_lblBorrarPacienteMouseClicked

    private void lblNuevoPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevoPacienteMouseClicked
        if (lblNuevoPaciente.isEnabled()) {
            txtNumDni.requestFocus();
            txtModo.setText("0");
            nuevoPaciente();
        }
    }//GEN-LAST:event_lblNuevoPacienteMouseClicked

    private void lblGuardarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGuardarPacienteMouseClicked
        if (lblGuardarPaciente.isEnabled()) {
            validarCampos();
        }
    }//GEN-LAST:event_lblGuardarPacienteMouseClicked

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        updateTabla();
    }//GEN-LAST:event_formInternalFrameOpened

    private void jcPaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcPaisActionPerformed
           comboDepartamento();
    }//GEN-LAST:event_jcPaisActionPerformed

    private void txtNombresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyReleased
        String n = txtNombres.getText().toUpperCase();
        txtNombres.setText(n);
    }//GEN-LAST:event_txtNombresKeyReleased

    private void txtApellidosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyReleased
        String a = txtApellidos.getText().toUpperCase();
        txtApellidos.setText(a);
    }//GEN-LAST:event_txtApellidosKeyReleased

    private void txtDireccionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyReleased
        String a = txtDireccion.getText().toUpperCase();
        txtDireccion.setText(a);
    }//GEN-LAST:event_txtDireccionKeyReleased

    private void txtValorBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorBuscarKeyPressed
        
    }//GEN-LAST:event_txtValorBuscarKeyPressed

    private void txtValorBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorBuscarKeyTyped
        int indice;
        String vBuscar="";
        
        String vValor = txtValorBuscar.getText();
        indice = jcBuscar.getSelectedIndex();

        switch (indice) 
        {
            case 1:  vBuscar = "nombres";
                     break;
            case 2:  vBuscar = "concat(aPaterno,' ',aMaterno)";
                     break;
            case 3:  vBuscar = "telefono";
                     break;
            case 4:  vBuscar = "email";
                     break;
            case 5:  vBuscar = "pais";
                     break;
            case 6:  vBuscar = "departamento";
                     break; 
            case 7:  vBuscar = "provincia";
                     break; 
            case 8:  vBuscar = "distrito";
                     break;                   
            default: 
                vBuscar = "numDocumento";     
                break;
        }                
        
        try {
            //p.buscarPaciente(vBuscar, vValor);           
            tablaPacientes.setModel( p.buscarPaciente(vBuscar, vValor));
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
            Logger.getLogger(frmPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtValorBuscarKeyTyped

    private void txtNumDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumDniActionPerformed

    private void txtNumDniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumDniFocusLost
        
    }//GEN-LAST:event_txtNumDniFocusLost

    private void jcCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcCiudadActionPerformed
        comboProvincia();
    }//GEN-LAST:event_jcCiudadActionPerformed

    private void jcProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcProvinciaActionPerformed
        comboDistrito();
    }//GEN-LAST:event_jcProvinciaActionPerformed

    private void jcCiudadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcCiudadMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jcCiudadMouseClicked

    private void jcProvinciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcProvinciaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jcProvinciaMouseClicked

    private void txtApellidos2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidos2KeyReleased
        // TODO add your handling code here:
        String a = txtApellidos2.getText().toUpperCase();
        txtApellidos2.setText(a);
    }//GEN-LAST:event_txtApellidos2KeyReleased

    private void lblModificarPacienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModificarPacienteMouseEntered
        txtModo.setText("1");
    }//GEN-LAST:event_lblModificarPacienteMouseEntered

    private void txtEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyReleased
        // TODO add your handling code here:
        String n = txtEmail.getText().toUpperCase();
        txtEmail.setText(n);
    }//GEN-LAST:event_txtEmailKeyReleased

    private void lblNuevoPacienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNuevoPacienteMouseEntered
        // TODO add your handling code here:
        txtModo.setText("0");
    }//GEN-LAST:event_lblNuevoPacienteMouseEntered

    private void jcEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcEmailActionPerformed
        // TODO add your handling code here:
        if (jcEmail.getSelectedItem().toString().equals("OTRO CORREO") && jcEmail.isEnabled()) {
            frmNuevoCorreo.setVisible(true);
            txtNCorreo.setText("");
        }
    }//GEN-LAST:event_jcEmailActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < jcEmail.getItemCount(); i++) {
            if (txtNCorreo.getText().equalsIgnoreCase(jcEmail.getItemAt(i).toString()) || txtNCorreo.getText().equals(""))
                return;
        }
        agregarNCorreo();
        comboEmail();
        jcEmail.setSelectedItem(txtNCorreo.getText());
        txtNCorreo.setText("");
        frmNuevoCorreo.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNCorreoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNCorreoKeyReleased
        // TODO add your handling code here:
        String n = txtNCorreo.getText().toUpperCase();
        txtNCorreo.setText(n);
    }//GEN-LAST:event_txtNCorreoKeyReleased

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();

        boolean numeros = key >= 48 && key <= 57;

        if (!numeros)
        {
            evt.consume();
        }

        if (txtTelefono.getText().trim().length() == 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

         if (!(minusculas || mayusculas || espacio))
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombresKeyTyped

    private void txtApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidosKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();

        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;

         if (!(minusculas || mayusculas || espacio))
        {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidosKeyTyped

    private void txtNumDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumDniKeyTyped
        // TODO add your handling code here:
        int key = evt.getKeyChar();
        int lim=digitosDoc();

        boolean numeros = key >= 48 && key <= 57;

        if (!numeros)
        {
            evt.consume();
        }

        if (txtNumDni.getText().trim().length() >= lim) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNumDniKeyTyped
    
    public int digitosDoc(){
        int lim = 0;
        switch (jcTipoDoc.getSelectedItem().toString()){case "CARNET DE ESTRANJERIA":
                lim = 12;
                break;
            case "PASAPORTE":
                lim = 12;
                break;
            default:
                lim = 8;
                break;
        }
        return lim;
    }
    
    public final void agregarNCorreo(){
    try
        {
            con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("INSERT INTO tipoemail (idTipoEmail, email) VALUES (NULL, '"+txtNCorreo.getText()+"');");
            pstm.execute();
            pstm.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }//fin combo paises
    
    public void activaControles(boolean cd ,boolean cp)
    {
        txtCodigoPaciente.setEditable(cd);
        txtNumDni.setEditable(cp);
        txtNombres.setEditable(cp);
        txtApellidos.setEditable(cp);
        txtApellidos2.setEditable(cp);
        txtDireccion.setEditable(cp);
        jcPais.setEnabled(cp);
        jcCiudad.setEnabled(cp);
        jcProvincia.setEnabled(cp);
        jcDistrito.setEnabled(cp);
        jcTipoDoc.setEnabled(cp);
        jcEmail.setEnabled(cp);
        txtTelefono.setEditable(cp);
        txtEmail.setEditable(cp);
        jdFechNac.setEnabled(cp);
//        rbDni.setEnabled(cp);
//        rbPasaporte.setEnabled(cp);
    }
    
    //METODO PARA ACTIVAR O DESACTIVAR LAS OPCIONES DE CONTROL DEL FORMULARIO
    public void activaOpciones(boolean n, boolean m, boolean e, boolean g, boolean c)
    {
        lblNuevoPaciente.setEnabled(n);
        lblModificarPaciente.setEnabled(m);
        lblBorrarPaciente.setEnabled(e);
        lblGuardarPaciente.setEnabled(g);
        lblCancelarCambios.setEnabled(c);
    }
    
    //METODO PARA LIMPIAR LOS OBJETOS
    public void limpiarObjetos()
    {
        txtCodigoPaciente.setText("");
        txtNumDni.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtApellidos2.setText("");
        txtDireccion.setText("");
        jcPais.setSelectedIndex(0);
        jcCiudad.setSelectedIndex(0);
        jcProvincia.setSelectedIndex(0);
        jcDistrito.setSelectedIndex(0);
        jcTipoDoc.setSelectedIndex(0);
        jcEmail.setSelectedIndex(0);
        txtTelefono.setText("");
        txtEmail.setText("");
        txtModo.setText("0");
        jdFechNac.setDate(null);
//        rbDni.setSelected(false);
//        rbPasaporte.setSelected(false);
    }
    private void updateTabla(){
       String[] columNames = {"IdPaciente", "Tipo Documento", "N° DOC", "Nombres", "A. Paterno","A. Materno","F. Nacimiento","Teléfono", "email", "Dirección", "Pais","Deapartamento", "Provincia","Distrito"};
        //usamos la funcion
        dtPaciente = p.getDatos();

        // se colocan los datos en la tabla
        DefaultTableModel datos= new DefaultTableModel(dtPaciente,columNames);
        tablaPacientes.setModel(datos);
    }
    public final void comboEmail(){
    try
        {
            con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT * FROM tipoemail ORDER BY idTipoEmail ASC");
            ResultSet res=pstm.executeQuery();
            jcEmail.removeAllItems();
           //BUCLE QUE PERMITE LLENAR EL COMBO
            while (res.next())
            {;
                jcEmail.addItem (res.getString("email"));
            }
            res.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }//fin combo paises
    public final void comboPais(){
    try
        {
            con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT * FROM pais");
            ResultSet res=pstm.executeQuery();

           //BUCLE QUE PERMITE LLENAR EL COMBO
            while (res.next())
            {;
                jcPais.addItem (res.getString("pais"));
            }
            res.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }//fin combo paises
    public final void comboDepartamento(){

     String pais=(String) jcPais.getSelectedItem().toString(); 
     if (jcPais.getItemCount()<=0) {
            pais = "";
        }else  {
            pais=(String) jcPais.getSelectedItem().toString();
        }
     String avPais = null;
        try
        {
            //con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT avPais FROM pais WHERE pais='"+pais+"'");
            ResultSet res=pstm.executeQuery();	

            //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res.next())
            {
                avPais = res.getString("avPais");
            }
            res.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT * FROM departamento WHERE avPais='"+avPais+"'ORDER by departamento ASC");
            ResultSet res1=pstm.executeQuery();

            jcCiudad.removeAllItems();//REMOVEMOS TODOS LOS ITEMS DEL COMBO

           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                jcCiudad.addItem (res1.getString("departamento"));                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }    
    }
    public final void comboProvincia(){
     String Dpto; 
     
     if (jcCiudad.getItemCount()<=0) {
            Dpto = "";
        }else  {
            Dpto=(String) jcCiudad.getSelectedItem().toString();
        }
     
     String idDpto = null;
        try
        {
            //con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT idDepartamento FROM departamento WHERE departamento='"+Dpto+"'");
            ResultSet res=pstm.executeQuery();	

            //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res.next())
            {
                idDpto = res.getString("idDepartamento");
            }
            res.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT * FROM provincia WHERE idDepartamento='"+idDpto+"'ORDER by provincia ASC");
            ResultSet res1=pstm.executeQuery();

            jcProvincia.removeAllItems();//REMOVEMOS TODOS LOS ITEMS DEL COMBO
            
           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                System.out.println(""+res1.getString("provincia"));
                jcProvincia.addItem (res1.getString("provincia"));                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }    
    }
    public final void comboDistrito(){
        String Dpto;
        if (jcProvincia.getItemCount()<=0) {
            Dpto = "";
        }else  {
            Dpto=(String) jcProvincia.getSelectedItem().toString();
        }
     
     String idProv = null;
        try
        {
            //con = new bdConexion();
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT idProvincia FROM provincia WHERE provincia='"+Dpto+"'");
            ResultSet res=pstm.executeQuery();	

            //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res.next())
            {
                idProv = res.getString("idProvincia");
            }
            res.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT * FROM distrito WHERE idProvincia='"+idProv+"'ORDER by distrito ASC");
            ResultSet res1=pstm.executeQuery();

            jcDistrito.removeAllItems();//REMOVEMOS TODOS LOS ITEMS DEL COMBO

           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                jcDistrito.addItem (res1.getString("distrito"));                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }    
    }
    public final void comboTipoDato(){
        
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT * FROM tipodocumento WHERE uso = 'PERS' ORDER by documento ASC");
            ResultSet res1=pstm.executeQuery();
           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                jcTipoDoc.addItem (res1.getString("documento"));                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }    
    }
    public void nuevoPaciente()
    {
       
       limpiarObjetos();
       activaOpciones (false, false, false, true,true);
       activaControles (false,true);

       //GENERAR CODIGO DE CLIENTE AUTOMANTICO
       int registros=0;
       try
        {
            PreparedStatement pstm=(PreparedStatement)
            con.getConnection().prepareStatement("SELECT count(1) as total FROM paciente");//cuenta el total de registros de la tabla paciente
            ResultSet res=pstm.executeQuery();
            res.next();
            registros = res.getInt("total");
            res.close();

            if (registros <=0)//significa que la tabla no tiene ningun registro
            {
                txtCodigoPaciente.setText("1");
            }
            else
            {                                  
//                con = new bdConexion();
                PreparedStatement pstm1=(PreparedStatement)
                con.getConnection().prepareStatement("SELECT MAX(IdPaciente) as codigo FROM paciente");
                ResultSet res1=pstm1.executeQuery();


                res1.first();
                String v =res1.getString("codigo");
                int cod=(Integer.parseInt(v))+1;
                txtCodigoPaciente.setText(""+cod);

            res1.close();
            }
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
    }
    //METODO PARA VALIDAR LOS CAMPOS DE TEXTO CUANDO ES UN REGISTRO NUEVO O MODIFICACION

    public void validarCampos()
    {
        
        if (txtNumDni.getText().equals("") )
        {
            JOptionPane.showMessageDialog(null,"Indique numero de Documento");                        
            txtNumDni.requestFocus();
        
        }
        else if (txtNombres.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Escriba el Nombre del Paciente");
            txtNombres.requestFocus();
        }
        else if (txtApellidos.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Escriba el Apellido Paterno del Paciente");
            txtApellidos.requestFocus();
        }else if (txtApellidos2.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Escriba el Apellido Materno del Paciente");
            txtApellidos2.requestFocus();
        }
        else if (txtDireccion.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Escriba la Direccion del Paciente");
            txtDireccion.requestFocus();
        }else if (jdFechNac.getDate() == null)
        {
            System.out.println(""+jdFechNac.getDateFormatString());
            JOptionPane.showMessageDialog(null,"Escriba la Fecha de nacimiento del Paciente");
            jdFechNac.requestFocus();
        }
        else if (txtTelefono.getText().equals("") )
        {
            JOptionPane.showMessageDialog(null,"Indique un numero de telefono o celular");                        
            txtTelefono.requestFocus();
        
        }
        else if (txtEmail.getText().equals("") )
        {
            JOptionPane.showMessageDialog(null,"Indique email de paciente");                        
            txtEmail.requestFocus();
        
        }
        else if (jcEmail.getSelectedItem().toString().equals("OTRO CORREO")) {
            JOptionPane.showMessageDialog(null,"Seleccione un Email correcto");                        
            jcEmail.requestFocus();
        }
        else
        {
            //SI TODOS LOS CAMPOS ESTAN CORRECTOS, LLAMAMOS AL METODO GUARDAR PACIENTE
            guardarPaciente();
        } 
    }
    public void guardarPaciente()
    {
        String nModo=txtModo.getText();
        
        String cpaciente = txtCodigoPaciente.getText();
        String dui = txtNumDni.getText();
        String tDoc = jcTipoDoc.getSelectedItem().toString();
        String idTDoc = idTDCoc(tDoc);
        String nom = txtNombres.getText();
        String aP = txtApellidos.getText();
        String aM = txtApellidos2.getText();
        String dir = txtDireccion.getText();
        String pa = jcPais.getSelectedItem().toString();
        String ci = jcCiudad.getSelectedItem().toString();
        String pv = jcProvincia.getSelectedItem().toString();
        String dis = jcDistrito.getSelectedItem().toString();
        String codDistrito = codDist(pa, ci, pv, dis);

        System.out.println("idT: "+idTDoc);
        System.out.println("codigo: "+codDistrito);
        String tel = txtTelefono.getText();
        String email = txtEmail.getText()+"@"+jcEmail.getSelectedItem().toString();  

        Date Fecha = jdFechNac.getDate();
        Long d = Fecha.getTime();
        java.sql.Date fechaN = new java.sql.Date(d);

        switch (nModo)
        {
            case "0":

                    int resp;
                    resp=JOptionPane.showConfirmDialog(null,"¿Desea guardar el registro?","Pregunta",0);

                    if (resp==0)
                    {
                        

                        p.nuevoPaciente(cpaciente, nom, aP, aM, dui, fechaN.toString(), tel, email, dir, "1", idTDoc, codDistrito);
                        updateTabla();
//
                        activaOpciones(true,false,false,false,false);
                        activaControles (false,false);
                        limpiarObjetos();

                    }
                    break;
            case "1"://SIGNIFICA QUE ES UNA MODIFICACION
                

                        //ENVIAMOS LOS CAMPOS AL CONSTRUCTOR DE LA CLASE CLIENTES
                        p.modificarPaciente(cpaciente, nom, aP, aM, dui, fechaN.toString(), tel, email, dir, "1", idTDoc, codDistrito);
                        
                        //ACTUALIZAMOS LOS CAMPOS DE LA TABLA
                        updateTabla();
                        activaOpciones(true,false,false,false,false);
                        activaControles(false,false);
                        limpiarObjetos();
                        JOptionPane.showMessageDialog(null,"El regisgtro fue actualizado correctamente","Informacion",1);

                        break;
            default: JOptionPane.showMessageDialog(null,"Error al guardar el registro, intente otra vez");
        }
    }
    public String idTDCoc(String doc){
        String tDoc="";
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT idTipoDocumento FROM tipodocumento WHERE documento = '"+doc+"';");
            ResultSet res1=pstm.executeQuery();

           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                tDoc = res1.getString("idTipoDocumento");                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        } 
        return tDoc;
    }
    public String codDist(String pa, String ci, String pv, String dis){
        String codDistrito="";
        try
        {
            /*CREAMOS LA CONEXION Y REALIZAMOS LA CONSULTA PARA OBTENER LOS DATOS DE LA TABLA CIUDADES
             SEGUN EL CODIGO DEL PAIS*/
            PreparedStatement pstm=(PreparedStatement)            
            con.getConnection().prepareStatement("SELECT d.codigoPostal FROM distrito d INNER JOIN "
                    + "provincia p ON p.idProvincia = d.idProvincia INNER JOIN "
                    + "departamento dp ON dp.idDepartamento = p.idDepartamento INNER JOIN "
                    + "pais ps ON ps.avPais = dp.avPais "
                    + "WHERE d.distrito = '"+dis+"' AND "
                    + "p.provincia = '"+pv+"' AND "
                    + "dp.departamento = '"+ci+"' AND "
                    + "ps.pais = '"+pa+"'");
            ResultSet res1=pstm.executeQuery();

           //BUCLE QUE PERMITE LLENAR EL COMBO CON LAS CIUDADES PRODUCTO DE LA CONSULTA
            while (res1.next())
            {
                codDistrito = res1.getString("codigoPostal");                
            }
            res1.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        } 
        return codDistrito;
    }
    //METODO PARA ACTUALIZAR LOS REGISTROS DE LA TABLA
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog frmNuevoCorreo;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane2;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    private javax.swing.JComboBox jcBuscar;
    private javax.swing.JComboBox jcCiudad;
    private javax.swing.JComboBox jcDistrito;
    private javax.swing.JComboBox jcEmail;
    private javax.swing.JComboBox jcPais;
    private javax.swing.JComboBox jcProvincia;
    private javax.swing.JComboBox jcTipoDoc;
    private com.toedter.calendar.JDateChooser jdFechNac;
    private javax.swing.JLabel lblBorrarPaciente;
    private javax.swing.JLabel lblCancelarCambios;
    private javax.swing.JLabel lblGuardarPaciente;
    private javax.swing.JLabel lblModificarPaciente;
    private javax.swing.JLabel lblNuevoPaciente;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JPanel panelPacientes;
    private javax.swing.JTable tablaPacientes;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtApellidos2;
    private javax.swing.JTextField txtCodigoPaciente;
    private javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtModo;
    private javax.swing.JTextField txtNCorreo;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtNumDni;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtValorBuscar;
    // End of variables declaration//GEN-END:variables
}
